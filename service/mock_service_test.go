// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enbility/eebus-go/service (interfaces: EEBUSServiceHandler)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEEBUSServiceHandler is a mock of EEBUSServiceHandler interface.
type MockEEBUSServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEEBUSServiceHandlerMockRecorder
}

// MockEEBUSServiceHandlerMockRecorder is the mock recorder for MockEEBUSServiceHandler.
type MockEEBUSServiceHandlerMockRecorder struct {
	mock *MockEEBUSServiceHandler
}

// NewMockEEBUSServiceHandler creates a new mock instance.
func NewMockEEBUSServiceHandler(ctrl *gomock.Controller) *MockEEBUSServiceHandler {
	mock := &MockEEBUSServiceHandler{ctrl: ctrl}
	mock.recorder = &MockEEBUSServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEEBUSServiceHandler) EXPECT() *MockEEBUSServiceHandlerMockRecorder {
	return m.recorder
}

// AllowWaitingForTrust mocks base method.
func (m *MockEEBUSServiceHandler) AllowWaitingForTrust(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowWaitingForTrust", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowWaitingForTrust indicates an expected call of AllowWaitingForTrust.
func (mr *MockEEBUSServiceHandlerMockRecorder) AllowWaitingForTrust(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowWaitingForTrust", reflect.TypeOf((*MockEEBUSServiceHandler)(nil).AllowWaitingForTrust), arg0)
}

// RemoteSKIConnected mocks base method.
func (m *MockEEBUSServiceHandler) RemoteSKIConnected(arg0 *EEBUSService, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoteSKIConnected", arg0, arg1)
}

// RemoteSKIConnected indicates an expected call of RemoteSKIConnected.
func (mr *MockEEBUSServiceHandlerMockRecorder) RemoteSKIConnected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteSKIConnected", reflect.TypeOf((*MockEEBUSServiceHandler)(nil).RemoteSKIConnected), arg0, arg1)
}

// RemoteSKIDisconnected mocks base method.
func (m *MockEEBUSServiceHandler) RemoteSKIDisconnected(arg0 *EEBUSService, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoteSKIDisconnected", arg0, arg1)
}

// RemoteSKIDisconnected indicates an expected call of RemoteSKIDisconnected.
func (mr *MockEEBUSServiceHandlerMockRecorder) RemoteSKIDisconnected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteSKIDisconnected", reflect.TypeOf((*MockEEBUSServiceHandler)(nil).RemoteSKIDisconnected), arg0, arg1)
}

// ServicePairingDetailUpdate mocks base method.
func (m *MockEEBUSServiceHandler) ServicePairingDetailUpdate(arg0 string, arg1 *ConnectionStateDetail) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServicePairingDetailUpdate", arg0, arg1)
}

// ServicePairingDetailUpdate indicates an expected call of ServicePairingDetailUpdate.
func (mr *MockEEBUSServiceHandlerMockRecorder) ServicePairingDetailUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePairingDetailUpdate", reflect.TypeOf((*MockEEBUSServiceHandler)(nil).ServicePairingDetailUpdate), arg0, arg1)
}

// ServiceShipIDUpdate mocks base method.
func (m *MockEEBUSServiceHandler) ServiceShipIDUpdate(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServiceShipIDUpdate", arg0, arg1)
}

// ServiceShipIDUpdate indicates an expected call of ServiceShipIDUpdate.
func (mr *MockEEBUSServiceHandlerMockRecorder) ServiceShipIDUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceShipIDUpdate", reflect.TypeOf((*MockEEBUSServiceHandler)(nil).ServiceShipIDUpdate), arg0, arg1)
}

// VisibleRemoteServicesUpdated mocks base method.
func (m *MockEEBUSServiceHandler) VisibleRemoteServicesUpdated(arg0 *EEBUSService, arg1 []RemoteService) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VisibleRemoteServicesUpdated", arg0, arg1)
}

// VisibleRemoteServicesUpdated indicates an expected call of VisibleRemoteServicesUpdated.
func (mr *MockEEBUSServiceHandlerMockRecorder) VisibleRemoteServicesUpdated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VisibleRemoteServicesUpdated", reflect.TypeOf((*MockEEBUSServiceHandler)(nil).VisibleRemoteServicesUpdated), arg0, arg1)
}
