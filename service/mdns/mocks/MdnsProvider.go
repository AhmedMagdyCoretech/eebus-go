// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MdnsProvider is an autogenerated mock type for the MdnsProvider type
type MdnsProvider struct {
	mock.Mock
}

// Announce provides a mock function with given fields: serviceName, port, txt
func (_m *MdnsProvider) Announce(serviceName string, port int, txt []string) error {
	ret := _m.Called(serviceName, port, txt)

	if len(ret) == 0 {
		panic("no return value specified for Announce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, []string) error); ok {
		r0 = rf(serviceName, port, txt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckAvailability provides a mock function with given fields:
func (_m *MdnsProvider) CheckAvailability() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckAvailability")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ResolveEntries provides a mock function with given fields: cancelChan, callback
func (_m *MdnsProvider) ResolveEntries(cancelChan chan bool, callback func(map[string]string, string, string, []net.IP, int, bool)) {
	_m.Called(cancelChan, callback)
}

// Shutdown provides a mock function with given fields:
func (_m *MdnsProvider) Shutdown() {
	_m.Called()
}

// Unannounce provides a mock function with given fields:
func (_m *MdnsProvider) Unannounce() {
	_m.Called()
}

// NewMdnsProvider creates a new instance of MdnsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMdnsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MdnsProvider {
	mock := &MdnsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
