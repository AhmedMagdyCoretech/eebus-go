// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	model "github.com/enbility/eebus-go/spine/model"
	mock "github.com/stretchr/testify/mock"
)

// SpineDataProcessing is an autogenerated mock type for the SpineDataProcessing type
type SpineDataProcessing struct {
	mock.Mock
}

// HandleIncomingSpineMesssage provides a mock function with given fields: message
func (_m *SpineDataProcessing) HandleIncomingSpineMesssage(message []byte) (*model.MsgCounterType, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for HandleIncomingSpineMesssage")
	}

	var r0 *model.MsgCounterType
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*model.MsgCounterType, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func([]byte) *model.MsgCounterType); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSpineDataProcessing creates a new instance of SpineDataProcessing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpineDataProcessing(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpineDataProcessing {
	mock := &SpineDataProcessing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
