// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	model "github.com/DerAndereAndi/eebus-go/spine/model"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Sender is an autogenerated mock type for the Sender type
type Sender struct {
	mock.Mock
}

// GetMsgCounter provides a mock function with given fields:
func (_m *Sender) GetMsgCounter() *model.MsgCounterType {
	ret := _m.Called()

	var r0 *model.MsgCounterType
	if rf, ok := ret.Get(0).(func() *model.MsgCounterType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	return r0
}

// Notify provides a mock function with given fields: msgCounter, senderAddress, destinationAddress, cmd
func (_m *Sender) Notify(msgCounter *model.MsgCounterType, senderAddress *model.FeatureAddressType, destinationAddress *model.FeatureAddressType, cmd []model.CmdType) error {
	ret := _m.Called(msgCounter, senderAddress, destinationAddress, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.MsgCounterType, *model.FeatureAddressType, *model.FeatureAddressType, []model.CmdType) error); ok {
		r0 = rf(msgCounter, senderAddress, destinationAddress, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reply provides a mock function with given fields: requestHeader, senderAddress, cmd
func (_m *Sender) Reply(requestHeader *model.HeaderType, senderAddress *model.FeatureAddressType, cmd model.CmdType) error {
	ret := _m.Called(requestHeader, senderAddress, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.HeaderType, *model.FeatureAddressType, model.CmdType) error); ok {
		r0 = rf(requestHeader, senderAddress, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Request provides a mock function with given fields: cmdClassifier, senderAddress, destinationAddress, ackRequest, cmd
func (_m *Sender) Request(cmdClassifier model.CmdClassifierType, senderAddress *model.FeatureAddressType, destinationAddress *model.FeatureAddressType, ackRequest bool, cmd []model.CmdType) (*model.MsgCounterType, error) {
	ret := _m.Called(cmdClassifier, senderAddress, destinationAddress, ackRequest, cmd)

	var r0 *model.MsgCounterType
	if rf, ok := ret.Get(0).(func(model.CmdClassifierType, *model.FeatureAddressType, *model.FeatureAddressType, bool, []model.CmdType) *model.MsgCounterType); ok {
		r0 = rf(cmdClassifier, senderAddress, destinationAddress, ackRequest, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CmdClassifierType, *model.FeatureAddressType, *model.FeatureAddressType, bool, []model.CmdType) error); ok {
		r1 = rf(cmdClassifier, senderAddress, destinationAddress, ackRequest, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Result provides a mock function with given fields: requestHeader, senderAddress, errorNumber, description
func (_m *Sender) Result(requestHeader *model.HeaderType, senderAddress *model.FeatureAddressType, errorNumber model.ErrorNumberType, description *model.DescriptionType) error {
	ret := _m.Called(requestHeader, senderAddress, errorNumber, description)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.HeaderType, *model.FeatureAddressType, model.ErrorNumberType, *model.DescriptionType) error); ok {
		r0 = rf(requestHeader, senderAddress, errorNumber, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendAcknowledgementMessage provides a mock function with given fields: err, featureSource, featureDestination, msgCounterReference
func (_m *Sender) SendAcknowledgementMessage(err error, featureSource *model.FeatureAddressType, featureDestination *model.FeatureAddressType, msgCounterReference *model.MsgCounterType) error {
	ret := _m.Called(err, featureSource, featureDestination, msgCounterReference)

	var r0 error
	if rf, ok := ret.Get(0).(func(error, *model.FeatureAddressType, *model.FeatureAddressType, *model.MsgCounterType) error); ok {
		r0 = rf(err, featureSource, featureDestination, msgCounterReference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: senderAddress, destinationAddress, serverFeatureType
func (_m *Sender) Subscribe(senderAddress *model.FeatureAddressType, destinationAddress *model.FeatureAddressType, serverFeatureType model.FeatureTypeType) error {
	ret := _m.Called(senderAddress, destinationAddress, serverFeatureType)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType, *model.FeatureAddressType, model.FeatureTypeType) error); ok {
		r0 = rf(senderAddress, destinationAddress, serverFeatureType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSender creates a new instance of Sender. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSender(t testing.TB) *Sender {
	mock := &Sender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
