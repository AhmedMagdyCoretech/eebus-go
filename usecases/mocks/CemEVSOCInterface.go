// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	model "github.com/enbility/spine-go/model"
	mock "github.com/stretchr/testify/mock"

	spine_goapi "github.com/enbility/spine-go/api"
)

// CemEVSOCInterface is an autogenerated mock type for the CemEVSOCInterface type
type CemEVSOCInterface struct {
	mock.Mock
}

type CemEVSOCInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *CemEVSOCInterface) EXPECT() *CemEVSOCInterface_Expecter {
	return &CemEVSOCInterface_Expecter{mock: &_m.Mock}
}

// AddFeatures provides a mock function with given fields:
func (_m *CemEVSOCInterface) AddFeatures() {
	_m.Called()
}

// CemEVSOCInterface_AddFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeatures'
type CemEVSOCInterface_AddFeatures_Call struct {
	*mock.Call
}

// AddFeatures is a helper method to define mock.On call
func (_e *CemEVSOCInterface_Expecter) AddFeatures() *CemEVSOCInterface_AddFeatures_Call {
	return &CemEVSOCInterface_AddFeatures_Call{Call: _e.mock.On("AddFeatures")}
}

func (_c *CemEVSOCInterface_AddFeatures_Call) Run(run func()) *CemEVSOCInterface_AddFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CemEVSOCInterface_AddFeatures_Call) Return() *CemEVSOCInterface_AddFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *CemEVSOCInterface_AddFeatures_Call) RunAndReturn(run func()) *CemEVSOCInterface_AddFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCase provides a mock function with given fields:
func (_m *CemEVSOCInterface) AddUseCase() {
	_m.Called()
}

// CemEVSOCInterface_AddUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCase'
type CemEVSOCInterface_AddUseCase_Call struct {
	*mock.Call
}

// AddUseCase is a helper method to define mock.On call
func (_e *CemEVSOCInterface_Expecter) AddUseCase() *CemEVSOCInterface_AddUseCase_Call {
	return &CemEVSOCInterface_AddUseCase_Call{Call: _e.mock.On("AddUseCase")}
}

func (_c *CemEVSOCInterface_AddUseCase_Call) Run(run func()) *CemEVSOCInterface_AddUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CemEVSOCInterface_AddUseCase_Call) Return() *CemEVSOCInterface_AddUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *CemEVSOCInterface_AddUseCase_Call) RunAndReturn(run func()) *CemEVSOCInterface_AddUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// HasSupportForUseCaseScenarios provides a mock function with given fields: entity, scenarios
func (_m *CemEVSOCInterface) HasSupportForUseCaseScenarios(entity spine_goapi.EntityRemoteInterface, scenarios []model.UseCaseScenarioSupportType) bool {
	ret := _m.Called(entity, scenarios)

	if len(ret) == 0 {
		panic("no return value specified for HasSupportForUseCaseScenarios")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface, []model.UseCaseScenarioSupportType) bool); ok {
		r0 = rf(entity, scenarios)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CemEVSOCInterface_HasSupportForUseCaseScenarios_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSupportForUseCaseScenarios'
type CemEVSOCInterface_HasSupportForUseCaseScenarios_Call struct {
	*mock.Call
}

// HasSupportForUseCaseScenarios is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
//   - scenarios []model.UseCaseScenarioSupportType
func (_e *CemEVSOCInterface_Expecter) HasSupportForUseCaseScenarios(entity interface{}, scenarios interface{}) *CemEVSOCInterface_HasSupportForUseCaseScenarios_Call {
	return &CemEVSOCInterface_HasSupportForUseCaseScenarios_Call{Call: _e.mock.On("HasSupportForUseCaseScenarios", entity, scenarios)}
}

func (_c *CemEVSOCInterface_HasSupportForUseCaseScenarios_Call) Run(run func(entity spine_goapi.EntityRemoteInterface, scenarios []model.UseCaseScenarioSupportType)) *CemEVSOCInterface_HasSupportForUseCaseScenarios_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface), args[1].([]model.UseCaseScenarioSupportType))
	})
	return _c
}

func (_c *CemEVSOCInterface_HasSupportForUseCaseScenarios_Call) Return(_a0 bool) *CemEVSOCInterface_HasSupportForUseCaseScenarios_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CemEVSOCInterface_HasSupportForUseCaseScenarios_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface, []model.UseCaseScenarioSupportType) bool) *CemEVSOCInterface_HasSupportForUseCaseScenarios_Call {
	_c.Call.Return(run)
	return _c
}

// IsCompatibleEntityType provides a mock function with given fields: entity
func (_m *CemEVSOCInterface) IsCompatibleEntityType(entity spine_goapi.EntityRemoteInterface) bool {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for IsCompatibleEntityType")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) bool); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CemEVSOCInterface_IsCompatibleEntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCompatibleEntityType'
type CemEVSOCInterface_IsCompatibleEntityType_Call struct {
	*mock.Call
}

// IsCompatibleEntityType is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *CemEVSOCInterface_Expecter) IsCompatibleEntityType(entity interface{}) *CemEVSOCInterface_IsCompatibleEntityType_Call {
	return &CemEVSOCInterface_IsCompatibleEntityType_Call{Call: _e.mock.On("IsCompatibleEntityType", entity)}
}

func (_c *CemEVSOCInterface_IsCompatibleEntityType_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *CemEVSOCInterface_IsCompatibleEntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *CemEVSOCInterface_IsCompatibleEntityType_Call) Return(_a0 bool) *CemEVSOCInterface_IsCompatibleEntityType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CemEVSOCInterface_IsCompatibleEntityType_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) bool) *CemEVSOCInterface_IsCompatibleEntityType_Call {
	_c.Call.Return(run)
	return _c
}

// IsUseCaseSupported provides a mock function with given fields: remoteEntity
func (_m *CemEVSOCInterface) IsUseCaseSupported(remoteEntity spine_goapi.EntityRemoteInterface) (bool, error) {
	ret := _m.Called(remoteEntity)

	if len(ret) == 0 {
		panic("no return value specified for IsUseCaseSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) (bool, error)); ok {
		return rf(remoteEntity)
	}
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) bool); ok {
		r0 = rf(remoteEntity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(spine_goapi.EntityRemoteInterface) error); ok {
		r1 = rf(remoteEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CemEVSOCInterface_IsUseCaseSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUseCaseSupported'
type CemEVSOCInterface_IsUseCaseSupported_Call struct {
	*mock.Call
}

// IsUseCaseSupported is a helper method to define mock.On call
//   - remoteEntity spine_goapi.EntityRemoteInterface
func (_e *CemEVSOCInterface_Expecter) IsUseCaseSupported(remoteEntity interface{}) *CemEVSOCInterface_IsUseCaseSupported_Call {
	return &CemEVSOCInterface_IsUseCaseSupported_Call{Call: _e.mock.On("IsUseCaseSupported", remoteEntity)}
}

func (_c *CemEVSOCInterface_IsUseCaseSupported_Call) Run(run func(remoteEntity spine_goapi.EntityRemoteInterface)) *CemEVSOCInterface_IsUseCaseSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *CemEVSOCInterface_IsUseCaseSupported_Call) Return(_a0 bool, _a1 error) *CemEVSOCInterface_IsUseCaseSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CemEVSOCInterface_IsUseCaseSupported_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) (bool, error)) *CemEVSOCInterface_IsUseCaseSupported_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUseCase provides a mock function with given fields:
func (_m *CemEVSOCInterface) RemoveUseCase() {
	_m.Called()
}

// CemEVSOCInterface_RemoveUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUseCase'
type CemEVSOCInterface_RemoveUseCase_Call struct {
	*mock.Call
}

// RemoveUseCase is a helper method to define mock.On call
func (_e *CemEVSOCInterface_Expecter) RemoveUseCase() *CemEVSOCInterface_RemoveUseCase_Call {
	return &CemEVSOCInterface_RemoveUseCase_Call{Call: _e.mock.On("RemoveUseCase")}
}

func (_c *CemEVSOCInterface_RemoveUseCase_Call) Run(run func()) *CemEVSOCInterface_RemoveUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CemEVSOCInterface_RemoveUseCase_Call) Return() *CemEVSOCInterface_RemoveUseCase_Call {
	_c.Call.Return()
	return _c
}

func (_c *CemEVSOCInterface_RemoveUseCase_Call) RunAndReturn(run func()) *CemEVSOCInterface_RemoveUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// StateOfCharge provides a mock function with given fields: entity
func (_m *CemEVSOCInterface) StateOfCharge(entity spine_goapi.EntityRemoteInterface) (float64, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for StateOfCharge")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) (float64, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) float64); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(spine_goapi.EntityRemoteInterface) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CemEVSOCInterface_StateOfCharge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateOfCharge'
type CemEVSOCInterface_StateOfCharge_Call struct {
	*mock.Call
}

// StateOfCharge is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *CemEVSOCInterface_Expecter) StateOfCharge(entity interface{}) *CemEVSOCInterface_StateOfCharge_Call {
	return &CemEVSOCInterface_StateOfCharge_Call{Call: _e.mock.On("StateOfCharge", entity)}
}

func (_c *CemEVSOCInterface_StateOfCharge_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *CemEVSOCInterface_StateOfCharge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *CemEVSOCInterface_StateOfCharge_Call) Return(_a0 float64, _a1 error) *CemEVSOCInterface_StateOfCharge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CemEVSOCInterface_StateOfCharge_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) (float64, error)) *CemEVSOCInterface_StateOfCharge_Call {
	_c.Call.Return(run)
	return _c
}

// SupportedUseCaseScenarios provides a mock function with given fields: entity
func (_m *CemEVSOCInterface) SupportedUseCaseScenarios(entity spine_goapi.EntityRemoteInterface) []model.UseCaseScenarioSupportType {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for SupportedUseCaseScenarios")
	}

	var r0 []model.UseCaseScenarioSupportType
	if rf, ok := ret.Get(0).(func(spine_goapi.EntityRemoteInterface) []model.UseCaseScenarioSupportType); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UseCaseScenarioSupportType)
		}
	}

	return r0
}

// CemEVSOCInterface_SupportedUseCaseScenarios_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportedUseCaseScenarios'
type CemEVSOCInterface_SupportedUseCaseScenarios_Call struct {
	*mock.Call
}

// SupportedUseCaseScenarios is a helper method to define mock.On call
//   - entity spine_goapi.EntityRemoteInterface
func (_e *CemEVSOCInterface_Expecter) SupportedUseCaseScenarios(entity interface{}) *CemEVSOCInterface_SupportedUseCaseScenarios_Call {
	return &CemEVSOCInterface_SupportedUseCaseScenarios_Call{Call: _e.mock.On("SupportedUseCaseScenarios", entity)}
}

func (_c *CemEVSOCInterface_SupportedUseCaseScenarios_Call) Run(run func(entity spine_goapi.EntityRemoteInterface)) *CemEVSOCInterface_SupportedUseCaseScenarios_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spine_goapi.EntityRemoteInterface))
	})
	return _c
}

func (_c *CemEVSOCInterface_SupportedUseCaseScenarios_Call) Return(_a0 []model.UseCaseScenarioSupportType) *CemEVSOCInterface_SupportedUseCaseScenarios_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CemEVSOCInterface_SupportedUseCaseScenarios_Call) RunAndReturn(run func(spine_goapi.EntityRemoteInterface) []model.UseCaseScenarioSupportType) *CemEVSOCInterface_SupportedUseCaseScenarios_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUseCaseAvailability provides a mock function with given fields: available
func (_m *CemEVSOCInterface) UpdateUseCaseAvailability(available bool) {
	_m.Called(available)
}

// CemEVSOCInterface_UpdateUseCaseAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUseCaseAvailability'
type CemEVSOCInterface_UpdateUseCaseAvailability_Call struct {
	*mock.Call
}

// UpdateUseCaseAvailability is a helper method to define mock.On call
//   - available bool
func (_e *CemEVSOCInterface_Expecter) UpdateUseCaseAvailability(available interface{}) *CemEVSOCInterface_UpdateUseCaseAvailability_Call {
	return &CemEVSOCInterface_UpdateUseCaseAvailability_Call{Call: _e.mock.On("UpdateUseCaseAvailability", available)}
}

func (_c *CemEVSOCInterface_UpdateUseCaseAvailability_Call) Run(run func(available bool)) *CemEVSOCInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *CemEVSOCInterface_UpdateUseCaseAvailability_Call) Return() *CemEVSOCInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return()
	return _c
}

func (_c *CemEVSOCInterface_UpdateUseCaseAvailability_Call) RunAndReturn(run func(bool)) *CemEVSOCInterface_UpdateUseCaseAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// NewCemEVSOCInterface creates a new instance of CemEVSOCInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCemEVSOCInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CemEVSOCInterface {
	mock := &CemEVSOCInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
