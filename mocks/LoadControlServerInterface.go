// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	model "github.com/enbility/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// LoadControlServerInterface is an autogenerated mock type for the LoadControlServerInterface type
type LoadControlServerInterface struct {
	mock.Mock
}

type LoadControlServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *LoadControlServerInterface) EXPECT() *LoadControlServerInterface_Expecter {
	return &LoadControlServerInterface_Expecter{mock: &_m.Mock}
}

// AddLimitDescription provides a mock function with given fields: description
func (_m *LoadControlServerInterface) AddLimitDescription(description model.LoadControlLimitDescriptionDataType) *model.LoadControlLimitIdType {
	ret := _m.Called(description)

	if len(ret) == 0 {
		panic("no return value specified for AddLimitDescription")
	}

	var r0 *model.LoadControlLimitIdType
	if rf, ok := ret.Get(0).(func(model.LoadControlLimitDescriptionDataType) *model.LoadControlLimitIdType); ok {
		r0 = rf(description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LoadControlLimitIdType)
		}
	}

	return r0
}

// LoadControlServerInterface_AddLimitDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLimitDescription'
type LoadControlServerInterface_AddLimitDescription_Call struct {
	*mock.Call
}

// AddLimitDescription is a helper method to define mock.On call
//   - description model.LoadControlLimitDescriptionDataType
func (_e *LoadControlServerInterface_Expecter) AddLimitDescription(description interface{}) *LoadControlServerInterface_AddLimitDescription_Call {
	return &LoadControlServerInterface_AddLimitDescription_Call{Call: _e.mock.On("AddLimitDescription", description)}
}

func (_c *LoadControlServerInterface_AddLimitDescription_Call) Run(run func(description model.LoadControlLimitDescriptionDataType)) *LoadControlServerInterface_AddLimitDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.LoadControlLimitDescriptionDataType))
	})
	return _c
}

func (_c *LoadControlServerInterface_AddLimitDescription_Call) Return(_a0 *model.LoadControlLimitIdType) *LoadControlServerInterface_AddLimitDescription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoadControlServerInterface_AddLimitDescription_Call) RunAndReturn(run func(model.LoadControlLimitDescriptionDataType) *model.LoadControlLimitIdType) *LoadControlServerInterface_AddLimitDescription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLimitDataForFilter provides a mock function with given fields: data, deleteElements, filter
func (_m *LoadControlServerInterface) UpdateLimitDataForFilter(data model.LoadControlLimitDataType, deleteElements *model.LoadControlLimitDataElementsType, filter model.LoadControlLimitDescriptionDataType) error {
	ret := _m.Called(data, deleteElements, filter)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLimitDataForFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.LoadControlLimitDataType, *model.LoadControlLimitDataElementsType, model.LoadControlLimitDescriptionDataType) error); ok {
		r0 = rf(data, deleteElements, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadControlServerInterface_UpdateLimitDataForFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLimitDataForFilter'
type LoadControlServerInterface_UpdateLimitDataForFilter_Call struct {
	*mock.Call
}

// UpdateLimitDataForFilter is a helper method to define mock.On call
//   - data model.LoadControlLimitDataType
//   - deleteElements *model.LoadControlLimitDataElementsType
//   - filter model.LoadControlLimitDescriptionDataType
func (_e *LoadControlServerInterface_Expecter) UpdateLimitDataForFilter(data interface{}, deleteElements interface{}, filter interface{}) *LoadControlServerInterface_UpdateLimitDataForFilter_Call {
	return &LoadControlServerInterface_UpdateLimitDataForFilter_Call{Call: _e.mock.On("UpdateLimitDataForFilter", data, deleteElements, filter)}
}

func (_c *LoadControlServerInterface_UpdateLimitDataForFilter_Call) Run(run func(data model.LoadControlLimitDataType, deleteElements *model.LoadControlLimitDataElementsType, filter model.LoadControlLimitDescriptionDataType)) *LoadControlServerInterface_UpdateLimitDataForFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.LoadControlLimitDataType), args[1].(*model.LoadControlLimitDataElementsType), args[2].(model.LoadControlLimitDescriptionDataType))
	})
	return _c
}

func (_c *LoadControlServerInterface_UpdateLimitDataForFilter_Call) Return(_a0 error) *LoadControlServerInterface_UpdateLimitDataForFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoadControlServerInterface_UpdateLimitDataForFilter_Call) RunAndReturn(run func(model.LoadControlLimitDataType, *model.LoadControlLimitDataElementsType, model.LoadControlLimitDescriptionDataType) error) *LoadControlServerInterface_UpdateLimitDataForFilter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLimitDataForId provides a mock function with given fields: data, deleteElements, limitId
func (_m *LoadControlServerInterface) UpdateLimitDataForId(data model.LoadControlLimitDataType, deleteElements *model.LoadControlLimitDataElementsType, limitId model.LoadControlLimitIdType) error {
	ret := _m.Called(data, deleteElements, limitId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLimitDataForId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.LoadControlLimitDataType, *model.LoadControlLimitDataElementsType, model.LoadControlLimitIdType) error); ok {
		r0 = rf(data, deleteElements, limitId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadControlServerInterface_UpdateLimitDataForId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLimitDataForId'
type LoadControlServerInterface_UpdateLimitDataForId_Call struct {
	*mock.Call
}

// UpdateLimitDataForId is a helper method to define mock.On call
//   - data model.LoadControlLimitDataType
//   - deleteElements *model.LoadControlLimitDataElementsType
//   - limitId model.LoadControlLimitIdType
func (_e *LoadControlServerInterface_Expecter) UpdateLimitDataForId(data interface{}, deleteElements interface{}, limitId interface{}) *LoadControlServerInterface_UpdateLimitDataForId_Call {
	return &LoadControlServerInterface_UpdateLimitDataForId_Call{Call: _e.mock.On("UpdateLimitDataForId", data, deleteElements, limitId)}
}

func (_c *LoadControlServerInterface_UpdateLimitDataForId_Call) Run(run func(data model.LoadControlLimitDataType, deleteElements *model.LoadControlLimitDataElementsType, limitId model.LoadControlLimitIdType)) *LoadControlServerInterface_UpdateLimitDataForId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.LoadControlLimitDataType), args[1].(*model.LoadControlLimitDataElementsType), args[2].(model.LoadControlLimitIdType))
	})
	return _c
}

func (_c *LoadControlServerInterface_UpdateLimitDataForId_Call) Return(_a0 error) *LoadControlServerInterface_UpdateLimitDataForId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoadControlServerInterface_UpdateLimitDataForId_Call) RunAndReturn(run func(model.LoadControlLimitDataType, *model.LoadControlLimitDataElementsType, model.LoadControlLimitIdType) error) *LoadControlServerInterface_UpdateLimitDataForId_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoadControlServerInterface creates a new instance of LoadControlServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoadControlServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoadControlServerInterface {
	mock := &LoadControlServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
