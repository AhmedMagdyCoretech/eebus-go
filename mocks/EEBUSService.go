// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/eebus-go/api"
	logging "github.com/enbility/ship-go/logging"

	mock "github.com/stretchr/testify/mock"

	ship_goapi "github.com/enbility/ship-go/api"

	spine_goapi "github.com/enbility/spine-go/api"
)

// EEBUSService is an autogenerated mock type for the EEBUSService type
type EEBUSService struct {
	mock.Mock
}

type EEBUSService_Expecter struct {
	mock *mock.Mock
}

func (_m *EEBUSService) EXPECT() *EEBUSService_Expecter {
	return &EEBUSService_Expecter{mock: &_m.Mock}
}

// CancelPairingWithSKI provides a mock function with given fields: ski
func (_m *EEBUSService) CancelPairingWithSKI(ski string) {
	_m.Called(ski)
}

// EEBUSService_CancelPairingWithSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelPairingWithSKI'
type EEBUSService_CancelPairingWithSKI_Call struct {
	*mock.Call
}

// CancelPairingWithSKI is a helper method to define mock.On call
//   - ski string
func (_e *EEBUSService_Expecter) CancelPairingWithSKI(ski interface{}) *EEBUSService_CancelPairingWithSKI_Call {
	return &EEBUSService_CancelPairingWithSKI_Call{Call: _e.mock.On("CancelPairingWithSKI", ski)}
}

func (_c *EEBUSService_CancelPairingWithSKI_Call) Run(run func(ski string)) *EEBUSService_CancelPairingWithSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EEBUSService_CancelPairingWithSKI_Call) Return() *EEBUSService_CancelPairingWithSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *EEBUSService_CancelPairingWithSKI_Call) RunAndReturn(run func(string)) *EEBUSService_CancelPairingWithSKI_Call {
	_c.Call.Return(run)
	return _c
}

// Configuration provides a mock function with given fields:
func (_m *EEBUSService) Configuration() *api.Configuration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Configuration")
	}

	var r0 *api.Configuration
	if rf, ok := ret.Get(0).(func() *api.Configuration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Configuration)
		}
	}

	return r0
}

// EEBUSService_Configuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configuration'
type EEBUSService_Configuration_Call struct {
	*mock.Call
}

// Configuration is a helper method to define mock.On call
func (_e *EEBUSService_Expecter) Configuration() *EEBUSService_Configuration_Call {
	return &EEBUSService_Configuration_Call{Call: _e.mock.On("Configuration")}
}

func (_c *EEBUSService_Configuration_Call) Run(run func()) *EEBUSService_Configuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EEBUSService_Configuration_Call) Return(_a0 *api.Configuration) *EEBUSService_Configuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EEBUSService_Configuration_Call) RunAndReturn(run func() *api.Configuration) *EEBUSService_Configuration_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectSKI provides a mock function with given fields: ski, reason
func (_m *EEBUSService) DisconnectSKI(ski string, reason string) {
	_m.Called(ski, reason)
}

// EEBUSService_DisconnectSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectSKI'
type EEBUSService_DisconnectSKI_Call struct {
	*mock.Call
}

// DisconnectSKI is a helper method to define mock.On call
//   - ski string
//   - reason string
func (_e *EEBUSService_Expecter) DisconnectSKI(ski interface{}, reason interface{}) *EEBUSService_DisconnectSKI_Call {
	return &EEBUSService_DisconnectSKI_Call{Call: _e.mock.On("DisconnectSKI", ski, reason)}
}

func (_c *EEBUSService_DisconnectSKI_Call) Run(run func(ski string, reason string)) *EEBUSService_DisconnectSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *EEBUSService_DisconnectSKI_Call) Return() *EEBUSService_DisconnectSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *EEBUSService_DisconnectSKI_Call) RunAndReturn(run func(string, string)) *EEBUSService_DisconnectSKI_Call {
	_c.Call.Return(run)
	return _c
}

// InitiatePairingWithSKI provides a mock function with given fields: ski
func (_m *EEBUSService) InitiatePairingWithSKI(ski string) {
	_m.Called(ski)
}

// EEBUSService_InitiatePairingWithSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiatePairingWithSKI'
type EEBUSService_InitiatePairingWithSKI_Call struct {
	*mock.Call
}

// InitiatePairingWithSKI is a helper method to define mock.On call
//   - ski string
func (_e *EEBUSService_Expecter) InitiatePairingWithSKI(ski interface{}) *EEBUSService_InitiatePairingWithSKI_Call {
	return &EEBUSService_InitiatePairingWithSKI_Call{Call: _e.mock.On("InitiatePairingWithSKI", ski)}
}

func (_c *EEBUSService_InitiatePairingWithSKI_Call) Run(run func(ski string)) *EEBUSService_InitiatePairingWithSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EEBUSService_InitiatePairingWithSKI_Call) Return() *EEBUSService_InitiatePairingWithSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *EEBUSService_InitiatePairingWithSKI_Call) RunAndReturn(run func(string)) *EEBUSService_InitiatePairingWithSKI_Call {
	_c.Call.Return(run)
	return _c
}

// LocalDevice provides a mock function with given fields:
func (_m *EEBUSService) LocalDevice() spine_goapi.DeviceLocal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalDevice")
	}

	var r0 spine_goapi.DeviceLocal
	if rf, ok := ret.Get(0).(func() spine_goapi.DeviceLocal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spine_goapi.DeviceLocal)
		}
	}

	return r0
}

// EEBUSService_LocalDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalDevice'
type EEBUSService_LocalDevice_Call struct {
	*mock.Call
}

// LocalDevice is a helper method to define mock.On call
func (_e *EEBUSService_Expecter) LocalDevice() *EEBUSService_LocalDevice_Call {
	return &EEBUSService_LocalDevice_Call{Call: _e.mock.On("LocalDevice")}
}

func (_c *EEBUSService_LocalDevice_Call) Run(run func()) *EEBUSService_LocalDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EEBUSService_LocalDevice_Call) Return(_a0 spine_goapi.DeviceLocal) *EEBUSService_LocalDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EEBUSService_LocalDevice_Call) RunAndReturn(run func() spine_goapi.DeviceLocal) *EEBUSService_LocalDevice_Call {
	_c.Call.Return(run)
	return _c
}

// LocalService provides a mock function with given fields:
func (_m *EEBUSService) LocalService() *ship_goapi.ServiceDetails {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalService")
	}

	var r0 *ship_goapi.ServiceDetails
	if rf, ok := ret.Get(0).(func() *ship_goapi.ServiceDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ship_goapi.ServiceDetails)
		}
	}

	return r0
}

// EEBUSService_LocalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalService'
type EEBUSService_LocalService_Call struct {
	*mock.Call
}

// LocalService is a helper method to define mock.On call
func (_e *EEBUSService_Expecter) LocalService() *EEBUSService_LocalService_Call {
	return &EEBUSService_LocalService_Call{Call: _e.mock.On("LocalService")}
}

func (_c *EEBUSService_LocalService_Call) Run(run func()) *EEBUSService_LocalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EEBUSService_LocalService_Call) Return(_a0 *ship_goapi.ServiceDetails) *EEBUSService_LocalService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EEBUSService_LocalService_Call) RunAndReturn(run func() *ship_goapi.ServiceDetails) *EEBUSService_LocalService_Call {
	_c.Call.Return(run)
	return _c
}

// PairingDetailForSki provides a mock function with given fields: ski
func (_m *EEBUSService) PairingDetailForSki(ski string) *ship_goapi.ConnectionStateDetail {
	ret := _m.Called(ski)

	if len(ret) == 0 {
		panic("no return value specified for PairingDetailForSki")
	}

	var r0 *ship_goapi.ConnectionStateDetail
	if rf, ok := ret.Get(0).(func(string) *ship_goapi.ConnectionStateDetail); ok {
		r0 = rf(ski)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ship_goapi.ConnectionStateDetail)
		}
	}

	return r0
}

// EEBUSService_PairingDetailForSki_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PairingDetailForSki'
type EEBUSService_PairingDetailForSki_Call struct {
	*mock.Call
}

// PairingDetailForSki is a helper method to define mock.On call
//   - ski string
func (_e *EEBUSService_Expecter) PairingDetailForSki(ski interface{}) *EEBUSService_PairingDetailForSki_Call {
	return &EEBUSService_PairingDetailForSki_Call{Call: _e.mock.On("PairingDetailForSki", ski)}
}

func (_c *EEBUSService_PairingDetailForSki_Call) Run(run func(ski string)) *EEBUSService_PairingDetailForSki_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EEBUSService_PairingDetailForSki_Call) Return(_a0 *ship_goapi.ConnectionStateDetail) *EEBUSService_PairingDetailForSki_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EEBUSService_PairingDetailForSki_Call) RunAndReturn(run func(string) *ship_goapi.ConnectionStateDetail) *EEBUSService_PairingDetailForSki_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterRemoteSKI provides a mock function with given fields: ski, enable
func (_m *EEBUSService) RegisterRemoteSKI(ski string, enable bool) {
	_m.Called(ski, enable)
}

// EEBUSService_RegisterRemoteSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRemoteSKI'
type EEBUSService_RegisterRemoteSKI_Call struct {
	*mock.Call
}

// RegisterRemoteSKI is a helper method to define mock.On call
//   - ski string
//   - enable bool
func (_e *EEBUSService_Expecter) RegisterRemoteSKI(ski interface{}, enable interface{}) *EEBUSService_RegisterRemoteSKI_Call {
	return &EEBUSService_RegisterRemoteSKI_Call{Call: _e.mock.On("RegisterRemoteSKI", ski, enable)}
}

func (_c *EEBUSService_RegisterRemoteSKI_Call) Run(run func(ski string, enable bool)) *EEBUSService_RegisterRemoteSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *EEBUSService_RegisterRemoteSKI_Call) Return() *EEBUSService_RegisterRemoteSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *EEBUSService_RegisterRemoteSKI_Call) RunAndReturn(run func(string, bool)) *EEBUSService_RegisterRemoteSKI_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteServiceForSKI provides a mock function with given fields: ski
func (_m *EEBUSService) RemoteServiceForSKI(ski string) *ship_goapi.ServiceDetails {
	ret := _m.Called(ski)

	if len(ret) == 0 {
		panic("no return value specified for RemoteServiceForSKI")
	}

	var r0 *ship_goapi.ServiceDetails
	if rf, ok := ret.Get(0).(func(string) *ship_goapi.ServiceDetails); ok {
		r0 = rf(ski)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ship_goapi.ServiceDetails)
		}
	}

	return r0
}

// EEBUSService_RemoteServiceForSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteServiceForSKI'
type EEBUSService_RemoteServiceForSKI_Call struct {
	*mock.Call
}

// RemoteServiceForSKI is a helper method to define mock.On call
//   - ski string
func (_e *EEBUSService_Expecter) RemoteServiceForSKI(ski interface{}) *EEBUSService_RemoteServiceForSKI_Call {
	return &EEBUSService_RemoteServiceForSKI_Call{Call: _e.mock.On("RemoteServiceForSKI", ski)}
}

func (_c *EEBUSService_RemoteServiceForSKI_Call) Run(run func(ski string)) *EEBUSService_RemoteServiceForSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EEBUSService_RemoteServiceForSKI_Call) Return(_a0 *ship_goapi.ServiceDetails) *EEBUSService_RemoteServiceForSKI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EEBUSService_RemoteServiceForSKI_Call) RunAndReturn(run func(string) *ship_goapi.ServiceDetails) *EEBUSService_RemoteServiceForSKI_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogging provides a mock function with given fields: logger
func (_m *EEBUSService) SetLogging(logger logging.Logging) {
	_m.Called(logger)
}

// EEBUSService_SetLogging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogging'
type EEBUSService_SetLogging_Call struct {
	*mock.Call
}

// SetLogging is a helper method to define mock.On call
//   - logger logging.Logging
func (_e *EEBUSService_Expecter) SetLogging(logger interface{}) *EEBUSService_SetLogging_Call {
	return &EEBUSService_SetLogging_Call{Call: _e.mock.On("SetLogging", logger)}
}

func (_c *EEBUSService_SetLogging_Call) Run(run func(logger logging.Logging)) *EEBUSService_SetLogging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logging.Logging))
	})
	return _c
}

func (_c *EEBUSService_SetLogging_Call) Return() *EEBUSService_SetLogging_Call {
	_c.Call.Return()
	return _c
}

func (_c *EEBUSService_SetLogging_Call) RunAndReturn(run func(logging.Logging)) *EEBUSService_SetLogging_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields:
func (_m *EEBUSService) Setup() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EEBUSService_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type EEBUSService_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
func (_e *EEBUSService_Expecter) Setup() *EEBUSService_Setup_Call {
	return &EEBUSService_Setup_Call{Call: _e.mock.On("Setup")}
}

func (_c *EEBUSService_Setup_Call) Run(run func()) *EEBUSService_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EEBUSService_Setup_Call) Return(_a0 error) *EEBUSService_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EEBUSService_Setup_Call) RunAndReturn(run func() error) *EEBUSService_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *EEBUSService) Shutdown() {
	_m.Called()
}

// EEBUSService_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type EEBUSService_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *EEBUSService_Expecter) Shutdown() *EEBUSService_Shutdown_Call {
	return &EEBUSService_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *EEBUSService_Shutdown_Call) Run(run func()) *EEBUSService_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EEBUSService_Shutdown_Call) Return() *EEBUSService_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *EEBUSService_Shutdown_Call) RunAndReturn(run func()) *EEBUSService_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *EEBUSService) Start() {
	_m.Called()
}

// EEBUSService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type EEBUSService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *EEBUSService_Expecter) Start() *EEBUSService_Start_Call {
	return &EEBUSService_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *EEBUSService_Start_Call) Run(run func()) *EEBUSService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EEBUSService_Start_Call) Return() *EEBUSService_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *EEBUSService_Start_Call) RunAndReturn(run func()) *EEBUSService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartBrowseMdnsEntries provides a mock function with given fields:
func (_m *EEBUSService) StartBrowseMdnsEntries() {
	_m.Called()
}

// EEBUSService_StartBrowseMdnsEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartBrowseMdnsEntries'
type EEBUSService_StartBrowseMdnsEntries_Call struct {
	*mock.Call
}

// StartBrowseMdnsEntries is a helper method to define mock.On call
func (_e *EEBUSService_Expecter) StartBrowseMdnsEntries() *EEBUSService_StartBrowseMdnsEntries_Call {
	return &EEBUSService_StartBrowseMdnsEntries_Call{Call: _e.mock.On("StartBrowseMdnsEntries")}
}

func (_c *EEBUSService_StartBrowseMdnsEntries_Call) Run(run func()) *EEBUSService_StartBrowseMdnsEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EEBUSService_StartBrowseMdnsEntries_Call) Return() *EEBUSService_StartBrowseMdnsEntries_Call {
	_c.Call.Return()
	return _c
}

func (_c *EEBUSService_StartBrowseMdnsEntries_Call) RunAndReturn(run func()) *EEBUSService_StartBrowseMdnsEntries_Call {
	_c.Call.Return(run)
	return _c
}

// StopBrowseMdnsEntries provides a mock function with given fields:
func (_m *EEBUSService) StopBrowseMdnsEntries() {
	_m.Called()
}

// EEBUSService_StopBrowseMdnsEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopBrowseMdnsEntries'
type EEBUSService_StopBrowseMdnsEntries_Call struct {
	*mock.Call
}

// StopBrowseMdnsEntries is a helper method to define mock.On call
func (_e *EEBUSService_Expecter) StopBrowseMdnsEntries() *EEBUSService_StopBrowseMdnsEntries_Call {
	return &EEBUSService_StopBrowseMdnsEntries_Call{Call: _e.mock.On("StopBrowseMdnsEntries")}
}

func (_c *EEBUSService_StopBrowseMdnsEntries_Call) Run(run func()) *EEBUSService_StopBrowseMdnsEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EEBUSService_StopBrowseMdnsEntries_Call) Return() *EEBUSService_StopBrowseMdnsEntries_Call {
	_c.Call.Return()
	return _c
}

func (_c *EEBUSService_StopBrowseMdnsEntries_Call) RunAndReturn(run func()) *EEBUSService_StopBrowseMdnsEntries_Call {
	_c.Call.Return(run)
	return _c
}

// NewEEBUSService creates a new instance of EEBUSService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEEBUSService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EEBUSService {
	mock := &EEBUSService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
