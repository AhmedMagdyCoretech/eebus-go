// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enbility/eebus-go/ship (interfaces: ShipDataConnection,ShipDataProcessing,ShipServiceDataProvider)

// Package ship is a generated GoMock package.
package ship

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShipDataConnection is a mock of ShipDataConnection interface.
type MockShipDataConnection struct {
	ctrl     *gomock.Controller
	recorder *MockShipDataConnectionMockRecorder
}

// MockShipDataConnectionMockRecorder is the mock recorder for MockShipDataConnection.
type MockShipDataConnectionMockRecorder struct {
	mock *MockShipDataConnection
}

// NewMockShipDataConnection creates a new mock instance.
func NewMockShipDataConnection(ctrl *gomock.Controller) *MockShipDataConnection {
	mock := &MockShipDataConnection{ctrl: ctrl}
	mock.recorder = &MockShipDataConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShipDataConnection) EXPECT() *MockShipDataConnectionMockRecorder {
	return m.recorder
}

// CloseDataConnection mocks base method.
func (m *MockShipDataConnection) CloseDataConnection(arg0 int, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDataConnection", arg0, arg1)
}

// CloseDataConnection indicates an expected call of CloseDataConnection.
func (mr *MockShipDataConnectionMockRecorder) CloseDataConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDataConnection", reflect.TypeOf((*MockShipDataConnection)(nil).CloseDataConnection), arg0, arg1)
}

// InitDataProcessing mocks base method.
func (m *MockShipDataConnection) InitDataProcessing(arg0 ShipDataProcessing) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitDataProcessing", arg0)
}

// InitDataProcessing indicates an expected call of InitDataProcessing.
func (mr *MockShipDataConnectionMockRecorder) InitDataProcessing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDataProcessing", reflect.TypeOf((*MockShipDataConnection)(nil).InitDataProcessing), arg0)
}

// IsDataConnectionClosed mocks base method.
func (m *MockShipDataConnection) IsDataConnectionClosed() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDataConnectionClosed")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDataConnectionClosed indicates an expected call of IsDataConnectionClosed.
func (mr *MockShipDataConnectionMockRecorder) IsDataConnectionClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDataConnectionClosed", reflect.TypeOf((*MockShipDataConnection)(nil).IsDataConnectionClosed))
}

// WriteMessageToDataConnection mocks base method.
func (m *MockShipDataConnection) WriteMessageToDataConnection(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessageToDataConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessageToDataConnection indicates an expected call of WriteMessageToDataConnection.
func (mr *MockShipDataConnectionMockRecorder) WriteMessageToDataConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessageToDataConnection", reflect.TypeOf((*MockShipDataConnection)(nil).WriteMessageToDataConnection), arg0)
}

// MockShipDataProcessing is a mock of ShipDataProcessing interface.
type MockShipDataProcessing struct {
	ctrl     *gomock.Controller
	recorder *MockShipDataProcessingMockRecorder
}

// MockShipDataProcessingMockRecorder is the mock recorder for MockShipDataProcessing.
type MockShipDataProcessingMockRecorder struct {
	mock *MockShipDataProcessing
}

// NewMockShipDataProcessing creates a new mock instance.
func NewMockShipDataProcessing(ctrl *gomock.Controller) *MockShipDataProcessing {
	mock := &MockShipDataProcessing{ctrl: ctrl}
	mock.recorder = &MockShipDataProcessingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShipDataProcessing) EXPECT() *MockShipDataProcessingMockRecorder {
	return m.recorder
}

// HandleIncomingShipMessage mocks base method.
func (m *MockShipDataProcessing) HandleIncomingShipMessage(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleIncomingShipMessage", arg0)
}

// HandleIncomingShipMessage indicates an expected call of HandleIncomingShipMessage.
func (mr *MockShipDataProcessingMockRecorder) HandleIncomingShipMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIncomingShipMessage", reflect.TypeOf((*MockShipDataProcessing)(nil).HandleIncomingShipMessage), arg0)
}

// ReportConnectionError mocks base method.
func (m *MockShipDataProcessing) ReportConnectionError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportConnectionError", arg0)
}

// ReportConnectionError indicates an expected call of ReportConnectionError.
func (mr *MockShipDataProcessingMockRecorder) ReportConnectionError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportConnectionError", reflect.TypeOf((*MockShipDataProcessing)(nil).ReportConnectionError), arg0)
}

// MockShipServiceDataProvider is a mock of ShipServiceDataProvider interface.
type MockShipServiceDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockShipServiceDataProviderMockRecorder
}

// MockShipServiceDataProviderMockRecorder is the mock recorder for MockShipServiceDataProvider.
type MockShipServiceDataProviderMockRecorder struct {
	mock *MockShipServiceDataProvider
}

// NewMockShipServiceDataProvider creates a new mock instance.
func NewMockShipServiceDataProvider(ctrl *gomock.Controller) *MockShipServiceDataProvider {
	mock := &MockShipServiceDataProvider{ctrl: ctrl}
	mock.recorder = &MockShipServiceDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShipServiceDataProvider) EXPECT() *MockShipServiceDataProviderMockRecorder {
	return m.recorder
}

// AllowWaitingForTrust mocks base method.
func (m *MockShipServiceDataProvider) AllowWaitingForTrust(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowWaitingForTrust", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowWaitingForTrust indicates an expected call of AllowWaitingForTrust.
func (mr *MockShipServiceDataProviderMockRecorder) AllowWaitingForTrust(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowWaitingForTrust", reflect.TypeOf((*MockShipServiceDataProvider)(nil).AllowWaitingForTrust), arg0)
}

// HandleConnectionClosed mocks base method.
func (m *MockShipServiceDataProvider) HandleConnectionClosed(arg0 ShipConnection, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleConnectionClosed", arg0, arg1)
}

// HandleConnectionClosed indicates an expected call of HandleConnectionClosed.
func (mr *MockShipServiceDataProviderMockRecorder) HandleConnectionClosed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConnectionClosed", reflect.TypeOf((*MockShipServiceDataProvider)(nil).HandleConnectionClosed), arg0, arg1)
}

// HandleShipHandshakeStateUpdate mocks base method.
func (m *MockShipServiceDataProvider) HandleShipHandshakeStateUpdate(arg0 string, arg1 ShipState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleShipHandshakeStateUpdate", arg0, arg1)
}

// HandleShipHandshakeStateUpdate indicates an expected call of HandleShipHandshakeStateUpdate.
func (mr *MockShipServiceDataProviderMockRecorder) HandleShipHandshakeStateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleShipHandshakeStateUpdate", reflect.TypeOf((*MockShipServiceDataProvider)(nil).HandleShipHandshakeStateUpdate), arg0, arg1)
}

// IsRemoteServiceForSKIPaired mocks base method.
func (m *MockShipServiceDataProvider) IsRemoteServiceForSKIPaired(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRemoteServiceForSKIPaired", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRemoteServiceForSKIPaired indicates an expected call of IsRemoteServiceForSKIPaired.
func (mr *MockShipServiceDataProviderMockRecorder) IsRemoteServiceForSKIPaired(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRemoteServiceForSKIPaired", reflect.TypeOf((*MockShipServiceDataProvider)(nil).IsRemoteServiceForSKIPaired), arg0)
}

// ReportServiceShipID mocks base method.
func (m *MockShipServiceDataProvider) ReportServiceShipID(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportServiceShipID", arg0, arg1)
}

// ReportServiceShipID indicates an expected call of ReportServiceShipID.
func (mr *MockShipServiceDataProviderMockRecorder) ReportServiceShipID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportServiceShipID", reflect.TypeOf((*MockShipServiceDataProvider)(nil).ReportServiceShipID), arg0, arg1)
}
