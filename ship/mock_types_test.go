// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enbility/eebus-go/ship (interfaces: WebsocketDataConnection,WebsocketDataProcessing,ShipServiceDataProvider,SpineDataProcessing,SpineDataConnection)
//
// Generated by this command:
//
//	mockgen -destination=mock_types_test.go -package=ship github.com/enbility/eebus-go/ship WebsocketDataConnection,WebsocketDataProcessing,ShipServiceDataProvider,SpineDataProcessing,SpineDataConnection
//

// Package ship is a generated GoMock package.
package ship

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebsocketDataConnection is a mock of WebsocketDataConnection interface.
type MockWebsocketDataConnection struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketDataConnectionMockRecorder
}

// MockWebsocketDataConnectionMockRecorder is the mock recorder for MockWebsocketDataConnection.
type MockWebsocketDataConnectionMockRecorder struct {
	mock *MockWebsocketDataConnection
}

// NewMockWebsocketDataConnection creates a new mock instance.
func NewMockWebsocketDataConnection(ctrl *gomock.Controller) *MockWebsocketDataConnection {
	mock := &MockWebsocketDataConnection{ctrl: ctrl}
	mock.recorder = &MockWebsocketDataConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketDataConnection) EXPECT() *MockWebsocketDataConnectionMockRecorder {
	return m.recorder
}

// CloseDataConnection mocks base method.
func (m *MockWebsocketDataConnection) CloseDataConnection(arg0 int, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDataConnection", arg0, arg1)
}

// CloseDataConnection indicates an expected call of CloseDataConnection.
func (mr *MockWebsocketDataConnectionMockRecorder) CloseDataConnection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDataConnection", reflect.TypeOf((*MockWebsocketDataConnection)(nil).CloseDataConnection), arg0, arg1)
}

// InitDataProcessing mocks base method.
func (m *MockWebsocketDataConnection) InitDataProcessing(arg0 WebsocketDataProcessing) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitDataProcessing", arg0)
}

// InitDataProcessing indicates an expected call of InitDataProcessing.
func (mr *MockWebsocketDataConnectionMockRecorder) InitDataProcessing(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDataProcessing", reflect.TypeOf((*MockWebsocketDataConnection)(nil).InitDataProcessing), arg0)
}

// IsDataConnectionClosed mocks base method.
func (m *MockWebsocketDataConnection) IsDataConnectionClosed() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDataConnectionClosed")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDataConnectionClosed indicates an expected call of IsDataConnectionClosed.
func (mr *MockWebsocketDataConnectionMockRecorder) IsDataConnectionClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDataConnectionClosed", reflect.TypeOf((*MockWebsocketDataConnection)(nil).IsDataConnectionClosed))
}

// WriteMessageToDataConnection mocks base method.
func (m *MockWebsocketDataConnection) WriteMessageToDataConnection(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessageToDataConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessageToDataConnection indicates an expected call of WriteMessageToDataConnection.
func (mr *MockWebsocketDataConnectionMockRecorder) WriteMessageToDataConnection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessageToDataConnection", reflect.TypeOf((*MockWebsocketDataConnection)(nil).WriteMessageToDataConnection), arg0)
}

// MockWebsocketDataProcessing is a mock of WebsocketDataProcessing interface.
type MockWebsocketDataProcessing struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketDataProcessingMockRecorder
}

// MockWebsocketDataProcessingMockRecorder is the mock recorder for MockWebsocketDataProcessing.
type MockWebsocketDataProcessingMockRecorder struct {
	mock *MockWebsocketDataProcessing
}

// NewMockWebsocketDataProcessing creates a new mock instance.
func NewMockWebsocketDataProcessing(ctrl *gomock.Controller) *MockWebsocketDataProcessing {
	mock := &MockWebsocketDataProcessing{ctrl: ctrl}
	mock.recorder = &MockWebsocketDataProcessingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketDataProcessing) EXPECT() *MockWebsocketDataProcessingMockRecorder {
	return m.recorder
}

// HandleIncomingShipMessage mocks base method.
func (m *MockWebsocketDataProcessing) HandleIncomingShipMessage(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleIncomingShipMessage", arg0)
}

// HandleIncomingShipMessage indicates an expected call of HandleIncomingShipMessage.
func (mr *MockWebsocketDataProcessingMockRecorder) HandleIncomingShipMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIncomingShipMessage", reflect.TypeOf((*MockWebsocketDataProcessing)(nil).HandleIncomingShipMessage), arg0)
}

// ReportConnectionError mocks base method.
func (m *MockWebsocketDataProcessing) ReportConnectionError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportConnectionError", arg0)
}

// ReportConnectionError indicates an expected call of ReportConnectionError.
func (mr *MockWebsocketDataProcessingMockRecorder) ReportConnectionError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportConnectionError", reflect.TypeOf((*MockWebsocketDataProcessing)(nil).ReportConnectionError), arg0)
}

// MockShipServiceDataProvider is a mock of ShipServiceDataProvider interface.
type MockShipServiceDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockShipServiceDataProviderMockRecorder
}

// MockShipServiceDataProviderMockRecorder is the mock recorder for MockShipServiceDataProvider.
type MockShipServiceDataProviderMockRecorder struct {
	mock *MockShipServiceDataProvider
}

// NewMockShipServiceDataProvider creates a new mock instance.
func NewMockShipServiceDataProvider(ctrl *gomock.Controller) *MockShipServiceDataProvider {
	mock := &MockShipServiceDataProvider{ctrl: ctrl}
	mock.recorder = &MockShipServiceDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShipServiceDataProvider) EXPECT() *MockShipServiceDataProviderMockRecorder {
	return m.recorder
}

// AllowWaitingForTrust mocks base method.
func (m *MockShipServiceDataProvider) AllowWaitingForTrust(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowWaitingForTrust", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowWaitingForTrust indicates an expected call of AllowWaitingForTrust.
func (mr *MockShipServiceDataProviderMockRecorder) AllowWaitingForTrust(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowWaitingForTrust", reflect.TypeOf((*MockShipServiceDataProvider)(nil).AllowWaitingForTrust), arg0)
}

// HandleConnectionClosed mocks base method.
func (m *MockShipServiceDataProvider) HandleConnectionClosed(arg0 ShipConnection, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleConnectionClosed", arg0, arg1)
}

// HandleConnectionClosed indicates an expected call of HandleConnectionClosed.
func (mr *MockShipServiceDataProviderMockRecorder) HandleConnectionClosed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConnectionClosed", reflect.TypeOf((*MockShipServiceDataProvider)(nil).HandleConnectionClosed), arg0, arg1)
}

// HandleShipHandshakeStateUpdate mocks base method.
func (m *MockShipServiceDataProvider) HandleShipHandshakeStateUpdate(arg0 string, arg1 ShipState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleShipHandshakeStateUpdate", arg0, arg1)
}

// HandleShipHandshakeStateUpdate indicates an expected call of HandleShipHandshakeStateUpdate.
func (mr *MockShipServiceDataProviderMockRecorder) HandleShipHandshakeStateUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleShipHandshakeStateUpdate", reflect.TypeOf((*MockShipServiceDataProvider)(nil).HandleShipHandshakeStateUpdate), arg0, arg1)
}

// IsRemoteServiceForSKIPaired mocks base method.
func (m *MockShipServiceDataProvider) IsRemoteServiceForSKIPaired(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRemoteServiceForSKIPaired", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRemoteServiceForSKIPaired indicates an expected call of IsRemoteServiceForSKIPaired.
func (mr *MockShipServiceDataProviderMockRecorder) IsRemoteServiceForSKIPaired(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRemoteServiceForSKIPaired", reflect.TypeOf((*MockShipServiceDataProvider)(nil).IsRemoteServiceForSKIPaired), arg0)
}

// ReportServiceShipID mocks base method.
func (m *MockShipServiceDataProvider) ReportServiceShipID(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportServiceShipID", arg0, arg1)
}

// ReportServiceShipID indicates an expected call of ReportServiceShipID.
func (mr *MockShipServiceDataProviderMockRecorder) ReportServiceShipID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportServiceShipID", reflect.TypeOf((*MockShipServiceDataProvider)(nil).ReportServiceShipID), arg0, arg1)
}

// SetupRemoteDevice mocks base method.
func (m *MockShipServiceDataProvider) SetupRemoteDevice(arg0 string, arg1 SpineDataConnection) SpineDataProcessing {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupRemoteDevice", arg0, arg1)
	ret0, _ := ret[0].(SpineDataProcessing)
	return ret0
}

// SetupRemoteDevice indicates an expected call of SetupRemoteDevice.
func (mr *MockShipServiceDataProviderMockRecorder) SetupRemoteDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupRemoteDevice", reflect.TypeOf((*MockShipServiceDataProvider)(nil).SetupRemoteDevice), arg0, arg1)
}

// MockSpineDataProcessing is a mock of SpineDataProcessing interface.
type MockSpineDataProcessing struct {
	ctrl     *gomock.Controller
	recorder *MockSpineDataProcessingMockRecorder
}

// MockSpineDataProcessingMockRecorder is the mock recorder for MockSpineDataProcessing.
type MockSpineDataProcessingMockRecorder struct {
	mock *MockSpineDataProcessing
}

// NewMockSpineDataProcessing creates a new mock instance.
func NewMockSpineDataProcessing(ctrl *gomock.Controller) *MockSpineDataProcessing {
	mock := &MockSpineDataProcessing{ctrl: ctrl}
	mock.recorder = &MockSpineDataProcessingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpineDataProcessing) EXPECT() *MockSpineDataProcessingMockRecorder {
	return m.recorder
}

// HandleIncomingSpineMesssage mocks base method.
func (m *MockSpineDataProcessing) HandleIncomingSpineMesssage(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleIncomingSpineMesssage", arg0)
}

// HandleIncomingSpineMesssage indicates an expected call of HandleIncomingSpineMesssage.
func (mr *MockSpineDataProcessingMockRecorder) HandleIncomingSpineMesssage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIncomingSpineMesssage", reflect.TypeOf((*MockSpineDataProcessing)(nil).HandleIncomingSpineMesssage), arg0)
}

// MockSpineDataConnection is a mock of SpineDataConnection interface.
type MockSpineDataConnection struct {
	ctrl     *gomock.Controller
	recorder *MockSpineDataConnectionMockRecorder
}

// MockSpineDataConnectionMockRecorder is the mock recorder for MockSpineDataConnection.
type MockSpineDataConnectionMockRecorder struct {
	mock *MockSpineDataConnection
}

// NewMockSpineDataConnection creates a new mock instance.
func NewMockSpineDataConnection(ctrl *gomock.Controller) *MockSpineDataConnection {
	mock := &MockSpineDataConnection{ctrl: ctrl}
	mock.recorder = &MockSpineDataConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpineDataConnection) EXPECT() *MockSpineDataConnectionMockRecorder {
	return m.recorder
}

// WriteSpineMessage mocks base method.
func (m *MockSpineDataConnection) WriteSpineMessage(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteSpineMessage", arg0)
}

// WriteSpineMessage indicates an expected call of WriteSpineMessage.
func (mr *MockSpineDataConnectionMockRecorder) WriteSpineMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSpineMessage", reflect.TypeOf((*MockSpineDataConnection)(nil).WriteSpineMessage), arg0)
}
